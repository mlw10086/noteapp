// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 权限控制字段
  status        String    @default("active") // active, banned, under_observation
  bannedUntil   DateTime? @map("banned_until") // 封禁到期时间，null表示永久封禁
  bannedReason  String?   @map("banned_reason") // 封禁原因
  bannedIps     String[]  @map("banned_ips") // 被封禁的IP地址列表
  lastIpAddress String?   @map("last_ip_address") // 最后登录IP地址

  // 关联便签
  notes     Note[]
  // 关联用户设置
  settings  UserSettings?
  // 关联登录历史
  loginHistory LoginHistory[]
  // 关联公告关闭记录
  dismissedAnnouncements UserAnnouncementDismissal[]
  // 关联通知
  notifications UserNotification[]
  // 关联发送的邀请
  sentInvitations NoteInvitation[] @relation("InvitationSender")
  // 关联接收的邀请
  receivedInvitations NoteInvitation[] @relation("InvitationReceiver")
  // 关联协作的便签
  collaborations NoteCollaborator[]

  @@map("users")
}

model Note {
  id          Int       @id @default(autoincrement())
  title       String
  content     String?
  color       String    @default("#ffffff")
  tags        String[]
  status      String    @default("published") // published, draft, scheduled
  publishAt   DateTime? @map("publish_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // 关联用户
  userId      Int       @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 关联协作者
  collaborators NoteCollaborator[]
  // 关联邀请
  invitations NoteInvitation[]

  @@map("notes")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  color String @default("#3b82f6")

  @@map("tags")
}

model UserSettings {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique @map("user_id")

  // 隐私设置
  dataCollection    Boolean  @default(true) @map("data_collection")
  analyticsTracking Boolean  @default(false) @map("analytics_tracking")
  shareUsageData    Boolean  @default(false) @map("share_usage_data")

  // 通知设置
  emailNotifications Boolean @default(true) @map("email_notifications")
  scheduledReminders Boolean @default(true) @map("scheduled_reminders")
  systemMessages     Boolean @default(true) @map("system_messages")
  reminderFrequency  String  @default("daily") @map("reminder_frequency")

  // 个人偏好
  theme             String  @default("system")
  language          String  @default("zh-CN")
  timezone          String  @default("Asia/Shanghai")
  dateFormat        String  @default("YYYY-MM-DD") @map("date_format")
  autoSave          Boolean @default(true) @map("auto_save")

  // 便签设置
  defaultColor      String  @default("#ffffff") @map("default_color")
  fontSize          Int     @default(14) @map("font_size")
  autoSaveInterval  Int     @default(30) @map("auto_save_interval")
  defaultTags       String[] @map("default_tags")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // 关联用户
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model LoginHistory {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  location  String?
  success   Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")

  // 关联用户
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_history")
}

// 管理员表
model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  role      String   @default("admin") // admin, super_admin
  isActive  Boolean  @default(true) @map("is_active")
  lastLogin DateTime? @map("last_login")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联管理员登录历史
  loginHistory AdminLoginHistory[]
  // 关联创建的公告
  announcements Announcement[]
  // 关联通知发送日志
  notificationLogs AdminNotificationLog[]
  // 关联创建的系统更新
  systemUpdates SystemUpdate[]

  @@map("admins")
}

// 管理员登录历史表
model AdminLoginHistory {
  id        Int      @id @default(autoincrement())
  adminId   Int      @map("admin_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  location  String?
  success   Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")

  // 关联管理员
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_login_history")
}

// 站点设置表
model SiteSettings {
  id                Int      @id @default(autoincrement())
  key               String   @unique
  value             String
  description       String?
  type              String   @default("string") // string, boolean, number, json
  category          String   @default("general") // general, security, features
  isPublic          Boolean  @default(false) @map("is_public") // 是否可以在前端访问
  updatedAt         DateTime @updatedAt @map("updated_at")
  updatedBy         String?  @map("updated_by") // 更新者邮箱

  @@map("site_settings")
}

// 公告表
model Announcement {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  type        String    @default("info") // info, warning, success, error
  priority    Int       @default(0) // 优先级，数字越大越靠前
  isActive    Boolean   @default(true) @map("is_active")
  startDate   DateTime? @map("start_date") // 开始显示时间
  endDate     DateTime? @map("end_date")   // 结束显示时间
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // 关联创建者
  createdBy   Int       @map("created_by")
  admin       Admin     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  // 关联用户关闭记录
  dismissedBy UserAnnouncementDismissal[]

  @@map("announcements")
}

// 用户公告关闭记录表
model UserAnnouncementDismissal {
  id             Int          @id @default(autoincrement())
  userId         Int          @map("user_id")
  announcementId Int          @map("announcement_id")
  dismissedAt    DateTime     @default(now()) @map("dismissed_at")

  // 关联用户
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  // 关联公告
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
  @@map("user_announcement_dismissals")
}

// 用户通知表
model UserNotification {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  type        String   // invitation, system, reminder, collaboration
  title       String
  content     String
  data        String?  // JSON 格式的额外数据
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")
  readAt      DateTime? @map("read_at")

  // 关联用户
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notifications")
}

// 管理员通知发送日志表
model AdminNotificationLog {
  id             Int      @id @default(autoincrement())
  adminId        Int      @map("admin_id")
  title          String
  content        String
  type           String   // system, announcement, maintenance, feature
  sendingType    String   @map("sending_type") // broadcast, single
  recipientCount Int      @map("recipient_count")
  recipientIds   Int[]    @map("recipient_ids")
  createdAt      DateTime @default(now()) @map("created_at")

  // 关联管理员
  admin          Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_notification_logs")
}

// 便签邀请表
model NoteInvitation {
  id          Int      @id @default(autoincrement())
  noteId      Int      @map("note_id")
  senderId    Int      @map("sender_id")
  receiverId  Int      @map("receiver_id")
  permission  String   @default("edit") // view, edit
  status      String   @default("pending") // pending, accepted, rejected, expired
  message     String?  // 邀请消息
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  respondedAt DateTime? @map("responded_at")

  // 关联便签
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  // 关联发送者
  sender      User     @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  // 关联接收者
  receiver    User     @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([noteId, receiverId])
  @@map("note_invitations")
}

// 便签协作者表
model NoteCollaborator {
  id          Int      @id @default(autoincrement())
  noteId      Int      @map("note_id")
  userId      Int      @map("user_id")
  permission  String   @default("edit") // view, edit
  joinedAt    DateTime @default(now()) @map("joined_at")
  lastActiveAt DateTime? @map("last_active_at")

  // 关联便签
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  // 关联用户
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
  @@map("note_collaborators")
}

// 系统更新记录表
model SystemUpdate {
  id          Int      @id @default(autoincrement())
  version     String   @unique // 版本号，如 "1.2.0"
  title       String   // 更新标题
  content     String   // 更新内容，支持 Markdown
  type        String   @default("feature") // feature, bugfix, improvement, security
  priority    String   @default("normal") // low, normal, high, critical
  isPublished Boolean  @default(false) @map("is_published") // 是否发布
  publishedAt DateTime? @map("published_at") // 发布时间
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联创建者（管理员）
  createdBy   Int      @map("created_by")
  admin       Admin    @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("system_updates")
}
